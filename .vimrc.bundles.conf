" Modeline and Notes {
" THIS FILE IS CONFIGURE OF VIM BUNDLES CONFIGURE
" Author    : CHRIS
" Date      : 20170206
" }

" Plugins {
    " Deps {
        if executable('ctags')
            set tags=./tags;/,~/.vimtags
            " Make tags placed in .git/tags file available in all levels of a repository
            let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
            if gitroot != ''
                let &tags = &tags . ',' . gitroot . '/.git/tags'
            endif

            " Bundle 'majutsushi/tagbar'
            if (isdirectory(expand("~/.vim/bundle/tagbar")))
                let g:tagbar_width = 20 "default 40
                nnoremap <silent> <F4> :TagbarToggle<CR>
            endif
        endif
    " }


    " UI{
        " vim-colors-solarized {
            if (filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim")))
                let g:solarized_termcolors=256
                let g:solarized_termtrans=1
                let g:solarized_contrast="normal"
                let g:solarized_visibility="normal"
                set background=dark
                colorscheme solarized       " Load a colorscheme
            endif
        " }
        " spf13/vim-colors
        " flazz/vim-colorschemes
        " powerline/fonts {
            if isdirectory(expand("~/.vim/bundle/fonts/"))
                let g:airline_powerline_fonts = 1
            endif
        " }
        " vim-airline {
            "Bundle 'vim-airline/vim-airline'
            if isdirectory(expand("~/.vim/bundle/vim-airline/"))
                if !exists('g:airline_symbols')
                    let g:airline_symbols = {}
                endif
                let g:airline_left_sep ='▶ '
                let g:airline_left_alt_sep = '❯'
                let g:airline_right_sep ='◀ '
                let g:airline_right_alt_sep = '❮'
                let g:airline_symbols.branch = '⎇ '
                "let g:airline_symbols.branch = '۲'
                "let g:airline_left_sep='›'  " Slightly fancier than '>'
                "let g:airline_right_sep='‹' " Slightly fancier than '<'
                " 开启tabline
                let g:airline#extensions#tabline#enabled = 1
                let g:airline#extensions#tabline#buffer_min_count = 2
                " tabline中当前buffer两端的分隔字符
                let g:airline#extensions#tabline#left_sep = ' '
                " tabline中未激活buffer两端的分隔字符
                let g:airline#extensions#tabline#left_alt_sep = '|'
                " tabline中buffer显示编号
                " let g:airline#extensions#tabline#buffer_nr_show = 1
                let g:airline#extensions#tabline#show_tab_type = 1
                " 使用airline自己定义的buffer编号跳转
                let g:airline#extensions#tabline#buffer_idx_mode = 1
                nmap <leader>1 <Plug>AirlineSelectTab1
                nmap <leader>2 <Plug>AirlineSelectTab2
                nmap <leader>3 <Plug>AirlineSelectTab3
                nmap <leader>4 <Plug>AirlineSelectTab4
                nmap <leader>5 <Plug>AirlineSelectTab5
                nmap <leader>6 <Plug>AirlineSelectTab6
                nmap <leader>7 <Plug>AirlineSelectTab7
                nmap <leader>8 <Plug>AirlineSelectTab8
                nmap <leader>9 <Plug>AirlineSelectTab9
                nmap <leader>- <Plug>AirlineSelectPrevTab
                nmap <leader>+ <Plug>AirlineSelectNextTab
                " enable/disable detection of whitespace errors.
                " 0: disable    1: enable
                let g:airline#extensions#whitespace#enabled = 0
                " statusline appear all the time, add the following to your vimrc
                set laststatus=2
            endif
            " Bundle 'vim-airline/vim-airline-themes'
            if isdirectory(expand("~/.vim/bundle/vim-airline-themes/"))
                if !exists('g:airline_theme')
                    let g:airline_theme = 'solarized'
                endif
            endif
        " }
        " bling/vim-bufferline   [NoNeed config, integration in airline
    " }

    " General {
        " NerdTree {
            if isdirectory(expand("~/.vim/bundle/nerdtree"))
                "map <leader>e :NERDTreeFind<CR>
                "nmap <leader>nt :NERDTreeFind<CR>
                let NERDTreeShowBookmarks=1
                let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
                let NERDTreeChDirMode=0
                let NERDTreeQuitOnOpen=0
                let NERDTreeMouseMode=2
                let NERDTreeShowHidden=1
                let ERDTreeKeepTreeInNewTab=1
                let g:nerdtree_tabs_open_on_gui_startup=0

                "当打开vim且没有文件时自动打开NERDTree
                autocmd vimenter * if !argc() | NERDTree | endif
                " 只剩 NERDTree时自动关闭
                autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
                " Plugin key-map bake
                "map <F3> :NERDTreeToggle<CR>
                map <F3> :NERDTreeTabsToggle<CR>
            endif
        " }
        " Bundle 'jistr/vim-nerdtree-tabs'
        " Bundle 'Xuyuanp/nerdtree-git-plugin'
        " indent_guides {
            if isdirectory(expand("~/.vim/bundle/vim-indent-guides/"))
                let g:indent_guides_start_level = 2
                let g:indent_guides_guide_size = 1
                " let g:indent_guides_enable_on_vim_startup = 1
                " Use this option to control whether the plugin considers tabs as indention.
                " Default: 1. Values: 0 or 1.
                let g:indent_guides_tab_guides = 0
                " Alternatively you can manually setup the highlight colors yourself
                "let g:indent_guides_auto_colors = 0
                "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
                "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
            endif
        " }
        " Wildfire "{
            if isdirectory(expand("~/.vim/bundle/wildfire/"))
                let g:wildfire_objects = {
                    \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
                    \ "html,xml" : ["at"],
                    \ }
            endif
        " }
        " matchit "{
            if isdirectory(expand("~/.vim/bundle/matchit.zip/"))
                " 自定义可以%跳转的列子
                let b:match_words = '<:>,<tag>:</tag>'
                let b:match_words = 'if:end if'
                let b:match_words = '<head>:</head>'
            endif
        " }
        " Session List {
            set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
            if isdirectory(expand("~/.vim/bundle/sessionman.vim/"))
                nmap <leader>sl :SessionList<CR>
                nmap <leader>ss :SessionSave<CR>
                nmap <leader>sc :SessionClose<CR>
            endif
        " }
        "  vim-easymotion {
            if isdirectory(expand("~/.vim/bundle/vim-easymotion/"))
                " <Leader>f{char} to move to {char}
                map  <Leader>f <Plug>(easymotion-bd-f)
                nmap <Leader>f <Plug>(easymotion-overwin-f)

                " s{char}{char} to move to {char}{char}
                nmap s <Plug>(easymotion-overwin-f2)

                " Move to line
                map <Leader>L <Plug>(easymotion-bd-jk)
                nmap <Leader>L <Plug>(easymotion-overwin-line)

                " Move to word
                map  <Leader>w <Plug>(easymotion-bd-w)
                nmap <Leader>w <Plug>(easymotion-overwin-w)
            endif
        " }
        " Bundle 'terryma/vim-multiple-cursors'
        " Bundle 'jiangmiao/auto-pairs'
        " Rainbow {
            if isdirectory(expand("~/.vim/bundle/rainbow/"))
                let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
                " 下面的为精确配置
	            let g:rainbow_conf = {
	            \	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
	            \	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
	            \	'operators': '_,_',
	            \	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
	            \	'separately': {
	            \		'*': {},
	            \		'tex': {
	            \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
	            \		},
	            \		'lisp': {
	            \			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
	            \		},
	            \		'vim': {
	            \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
	            \		},
	            \		'html': {
	            \			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
	            \		},
	            \		'css': 0,
	            \	}
	            \}
            endif
        " }
        " UndoTree {
            if isdirectory(expand("~/.vim/bundle/undotree/"))
                nnoremap <Leader>u :UndotreeToggle<CR>
                " If undotree is opened, it is likely one wants to interact with it.
                let g:undotree_SetFocusWhenToggle=1
            endif
        " }
    " }

    " General Programming {
        " Bundle 'tpope/vim-surround' {
            if isdirectory(expand("~/.vim/bundle/vim-surround/"))
                " Chris Add new hot key
                autocmd FileType php let b:surround_45 = "<?php \r ?>"
            endif

        " }
        " Bundle 'tpope/vim-repeat'
        " Tabularize {
            "You can avoid loading this plugin by setting the "Tabular_loaded" global variable
            "let g:tabular_loaded = 1
            if isdirectory(expand("~/.vim/bundle/tabular"))
                nmap <Leader>a& :Tabularize /&<CR>
                vmap <Leader>a& :Tabularize /&<CR>
                nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
                vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
                nmap <Leader>a=> :Tabularize /=><CR>
                vmap <Leader>a=> :Tabularize /=><CR>
                nmap <Leader>a: :Tabularize /:<CR>
                vmap <Leader>a: :Tabularize /:<CR>
                nmap <Leader>a:: :Tabularize /:\zs<CR>
                vmap <Leader>a:: :Tabularize /:\zs<CR>
                nmap <Leader>a, :Tabularize /,<CR>
                vmap <Leader>a, :Tabularize /,<CR>
                nmap <Leader>a,, :Tabularize /,\zs<CR>
                vmap <Leader>a,, :Tabularize /,\zs<CR>
                nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
                vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
            endif
        " }
        " Bundle 'scrooloose/nerdcommenter'
        " Bundle 'tpope/vim-commentary'
        " ctrlp {
            if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
                let g:ctrlp_working_path_mode = 'ra'
                "nnoremap <silent> <D-t> :CtrlP<CR>
                "nnoremap <silent> <D-r> :CtrlPMRU<CR>
                let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
                let g:ctrlp_custom_ignore = {
                  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
                  \ 'file': '\v\.(exe|so|dll)$',
                  \ 'link': 'some_bad_symbolic_links',
                  \ }

                if executable('ag')
                    let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
                elseif executable('ack-grep')
                    let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
                elseif executable('ack')
                    let s:ctrlp_fallback = 'ack %s --nocolor -f'
                " On Windows use "dir" as fallback command.
                elseif WINDOWS()
                    let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
                else
                    let s:ctrlp_fallback = 'find %s -type f'
                endif
                if exists("g:ctrlp_user_command")
                    unlet g:ctrlp_user_command
                endif
                let g:ctrlp_user_command = {
                    \ 'types': {
                        \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                        \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                    \ },
                    \ 'fallback': s:ctrlp_fallback
                \ }

                if isdirectory(expand("~/.vim/bundle/ctrlp-funky/"))
                    " CtrlP extensions
                    let g:ctrlp_extensions = ['funky']
                    let g:ctrlp_funky_syntax_highlight=1

                    " fu 进入当前文件的函数列表搜索
                    nnoremap <Leader>fu :CtrlPFunky<Cr>
                    " fU 搜索当前光标下单词对应的函数
                    nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

                endif
            endif
        "}
        " Bundle 'tpope/vim-fugitive'
        " Bundle 'mattn/webapi-vim'
        " Bundle 'mhinz/vim-signify'
        " Fugitive {
            " This plugin is only available if 'compatible' is not set.
            if isdirectory(expand("~/.vim/bundle/vim-fugitive/"))
                nnoremap <silent> <leader>gs :Gstatus<CR>
                nnoremap <silent> <leader>gd :Gdiff<CR>
                nnoremap <silent> <leader>gc :Gcommit<CR>
                nnoremap <silent> <leader>gb :Gblame<CR>
                nnoremap <silent> <leader>gl :Glog<CR>
                nnoremap <silent> <leader>gp :Git push<CR>
                nnoremap <silent> <leader>gr :Gread<CR>
                nnoremap <silent> <leader>gw :Gwrite<CR>
                nnoremap <silent> <leader>ge :Gedit<CR>
                " Mnemonic _i_nteractive
                nnoremap <silent> <leader>gi :Git add -p %<CR>
                nnoremap <silent> <leader>gg :SignifyToggle<CR>
            endif
        " }
        " Bundle 'rhysd/conflict-marker.vim'  解决冲突Git
        " Bundle 'mattn/gist-vim'            Gitlist
        " 静态语法检查
        " Pick one of the checksyntax, jslint, or syntastic
        " Bundle 'scrooloose/syntastic'     <无需配置>
    " }


    " Snippets & AutoComplete {
        " OmniComplete 因为spf13有  暂时先放上（应该是有些通用的设定在此）
        " OmniComplete {
            " To disable omni complete, add the following to your .vimrc.before.local file:
            "   let g:spf13_no_omni_complete = 1
            if !exists('g:spf13_no_omni_complete')
                if has("autocmd") && exists("+omnifunc")
                    autocmd Filetype *
                        \if &omnifunc == "" |
                        \setlocal omnifunc=syntaxcomplete#Complete |
                        \endif
                endif

                hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
                hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
                hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

                " Some convenient mappings
                "inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
                if exists('g:spf13_map_cr_omni_complete')
                    inoremap <expr> <CR>     pumvisible() ? "\<C-y>" : "\<CR>"
                endif
                inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
                inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
                inoremap <expr> <C-d>      pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
                inoremap <expr> <C-u>      pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

                " Automatically open and close the popup menu / preview window
                au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
                set completeopt=menu,preview,longest
            endif
        " }

        " YouCompleteMe {
            if count(g:bundle_groups, 'youcompleteme')
                let g:ycm_global_ycm_extra_conf='~/.vim/vim_setting/.ycm_extra_conf.py'

                let g:ycm_confirm_extra_conf=0          " 不显示开启vim时检查ycm_extra_conf文件的信息
                let g:acp_enableAtStartup = 0

                "nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
                nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>
                nnoremap <F6> :YcmForceCompileAndDiagnostics<CR>  "force recomile with

                " enable completion from tags
                let g:ycm_collect_identifiers_from_tags_files = 1

                "注释和字符串中的文字也会被收入补全
                let g:ycm_collect_identifiers_from_comments_and_strings = 0
                " 输入第2个字符开始补全  default=2
                "let g:ycm_min_num_of_chars_for_completion=2
                " 禁止缓存匹配项,每次都重新生成匹配项
                let g:ycm_cache_omnifunc=0
                " 开启语义补全
                let g:ycm_seed_identifiers_with_syntax=1
                "在注释输入中也能补全
                let g:ycm_complete_in_comments = 1
                "在字符串输入中也能补全
                let g:ycm_complete_in_strings = 1
                " 设置在下面几种格式的文件上屏蔽ycm
                let g:ycm_filetype_blacklist = {
                    \ 'tagbar' : 1,
                    \ 'qf' : 1,
                    \ 'notes' : 1,
                    \ 'markdown' : 1,
                    \ 'unite' : 1,
                    \ 'text' : 1,
                    \ 'vimwiki' : 1,
                    \ 'pandoc' : 1,
                    \ 'infolog' : 1,
                    \ 'mail' : 1
                    \}

               "If you're using YCM's identifier completer in C-family languages but cannot use
               "the clang-based semantic completer for those languages _and_ want to use the
               "GCC Syntastic checkers, unset this option.
               let g:ycm_show_diagnostics_ui = 0

                "youcompleteme  默认tab  s-tab 和 ultisnips 冲突
                let g:ycm_key_list_select_completion = ['<Down>']
                let g:ycm_key_list_previous_completion = ['<Up>']
                " 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
                let g:ycm_key_invoke_completion = '<M-;>'

                " SirVer/ultisnips 代码片断
                " Trigger configuration. YCM conflicts with UltiSnips TAB key usage
                let g:UltiSnipsExpandTrigger = '<C-k>'
                let g:UltiSnipsJumpForwardTrigger = '<C-k>'
                let g:UltiSnipsJumpBackwardTrigger = '<C-j>'
                " If you want :UltiSnipsEdit to split your window.
                " let g:UltiSnipsEditSplit="vertical"

                " Enable omni completion.
                autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
                autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
                autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
                autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
                autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
                autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
                autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
                " [CHRIS][170309][ADD][START]
                " 如果是VIM7.0以上，不需要再下载 phpcomplete.vim 这个插件，因为安装时自带了，/usr/share/vim/vim73/autoload/phpcomplete.vim
                "autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP

                " Haskell post write lint and check with ghcmod
                " $ `cabal install ghcmod` if missing and ensure
                " ~/.cabal/bin is in your $PATH.
                if !executable("ghcmod")
                    autocmd BufWritePost *.hs GhcModCheckAndLintAsync
                endif

                " For snippet_complete marker.
                if !exists("g:spf13_no_conceal")
                    if has('conceal')
                        set conceallevel=2 concealcursor=i
                    endif
                endif

                " Disable the neosnippet preview candidate window
                " When enabled, there can be too much visual noise
                " especially when splits are used.
                set completeopt-=preview
            endif
        " }

        " neocomplete {
            if count(g:bundle_groups, 'neocomplete')
                let g:acp_enableAtStartup = 0
                let g:neocomplete#enable_at_startup = 1
                let g:neocomplete#enable_smart_case = 1
                let g:neocomplete#enable_auto_delimiter = 1
                let g:neocomplete#max_list = 15
                let g:neocomplete#force_overwrite_completefunc = 1


                " Define dictionary.
                let g:neocomplete#sources#dictionary#dictionaries = {
                            \ 'default' : '',
                            \ 'vimshell' : $HOME.'/.vimshell_hist',
                            \ 'scheme' : $HOME.'/.gosh_completions'
                            \ }

                " Define keyword.
                if !exists('g:neocomplete#keyword_patterns')
                    let g:neocomplete#keyword_patterns = {}
                endif
                let g:neocomplete#keyword_patterns['default'] = '\h\w*'

                " Plugin key-mappings {
                    " These two lines conflict with the default digraph mapping of <C-K>
                    if !exists('g:spf13_no_neosnippet_expand')
                        imap <C-k> <Plug>(neosnippet_expand_or_jump)
                        smap <C-k> <Plug>(neosnippet_expand_or_jump)
                    endif
                    if exists('g:spf13_noninvasive_completion')
                        inoremap <CR> <CR>
                        " <ESC> takes you out of insert mode
                        inoremap <expr> <Esc>   pumvisible() ? "\<C-y>\<Esc>" : "\<Esc>"
                        " <CR> accepts first, then sends the <CR>
                        inoremap <expr> <CR>    pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
                        " <Down> and <Up> cycle like <Tab> and <S-Tab>
                        inoremap <expr> <Down>  pumvisible() ? "\<C-n>" : "\<Down>"
                        inoremap <expr> <Up>    pumvisible() ? "\<C-p>" : "\<Up>"
                        " Jump up and down the list
                        inoremap <expr> <C-d>   pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
                        inoremap <expr> <C-u>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"
                    else
                        " <C-k> Complete Snippet
                        " <C-k> Jump to next snippet point
                        imap <silent><expr><C-k> neosnippet#expandable() ?
                                    \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
                                    \ "\<C-e>" : "\<Plug>(neosnippet_expand_or_jump)")
                        smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

                        inoremap <expr><C-g> neocomplete#undo_completion()
                        inoremap <expr><C-l> neocomplete#complete_common_string()
                        "inoremap <expr><CR> neocomplete#complete_common_string()

                        " <CR>: close popup
                        " <s-CR>: close popup and save indent.
                        inoremap <expr><s-CR> pumvisible() ? neocomplete#smart_close_popup()."\<CR>" : "\<CR>"

                        function! CleverCr()
                            if pumvisible()
                                if neosnippet#expandable()
                                    let exp = "\<Plug>(neosnippet_expand)"
                                    return exp . neocomplete#smart_close_popup()
                                else
                                    return neocomplete#smart_close_popup()
                                endif
                            else
                                return "\<CR>"
                            endif
                        endfunction

                        " <CR> close popup and save indent or expand snippet
                        imap <expr> <CR> CleverCr()
                        " <C-h>, <BS>: close popup and delete backword char.
                        inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
                        inoremap <expr><C-y> neocomplete#smart_close_popup()
                    endif
                    " <TAB>: completion.
                    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
                    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

                    " Courtesy of Matteo Cavalleri

                    function! CleverTab()
                        if pumvisible()
                            return "\<C-n>"
                        endif
                        let substr = strpart(getline('.'), 0, col('.') - 1)
                        let substr = matchstr(substr, '[^ \t]*$')
                        if strlen(substr) == 0
                            " nothing to match on empty string
                            return "\<Tab>"
                        else
                            " existing text matching
                            if neosnippet#expandable_or_jumpable()
                                return "\<Plug>(neosnippet_expand_or_jump)"
                            else
                                return neocomplete#start_manual_complete()
                            endif
                        endif
                    endfunction

                    imap <expr> <Tab> CleverTab()
                " }

                " Enable heavy omni completion.
                if !exists('g:neocomplete#sources#omni#input_patterns')
                    let g:neocomplete#sources#omni#input_patterns = {}
                endif
                let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
                let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
                let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
                let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
                let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
            endif
        " }

        " Snippets {
            if count(g:bundle_groups, 'neocomplcache') ||
                        \ count(g:bundle_groups, 'neocomplete')

                " Use honza's snippets.
                let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

                " Enable neosnippet snipmate compatibility mode
                let g:neosnippet#enable_snipmate_compatibility = 1

                " For snippet_complete marker.
                if !exists("g:spf13_no_conceal")
                    if has('conceal')
                        set conceallevel=2 concealcursor=i
                    endif
                endif

                " Enable neosnippets when using go
                let g:go_snippet_engine = "neosnippet"

                " Disable the neosnippet preview candidate window
                " When enabled, there can be too much visual noise
                " especially when splits are used.
                set completeopt-=preview
            endif
        " }
    "}


    " PHP {
        " PIV {
            if isdirectory(expand("~/.vim/bundle/PIV"))
                " Close fold in PIV
                let g:DisableAutoPHPFolding = 1
                let php_folding = 0
            endif
        " }
        " arnaud-lb/vim-php-namespace" {
            if isdirectory(expand("~/.vim/bundle/vim-php-namespace"))
                function! IPhpInsertUse()
                    call PhpInsertUse()
                    call feedkeys('a',  'n')
                endfunction
                autocmd FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
                autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>
            endif
        " }
        "Bundle 'beyondwords/vim-twig'
        "Bundle 'mikehaertl/yii2-apidoc-vim'
    " }


    " HTML {
        " AutoCloseTag {
            if isdirectory(expand("~/.vim/bundle/HTML-AutoCloseTag"))
                " Make it so AutoCloseTag works for xml and xhtml files as well
                au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
                nmap <Leader>ac <Plug>ToggleAutoCloseMappings
            endif
        " }
        " hail2u/vim-css3-syntax
        " gorodinskiy/vim-coloresque
        " mattn/webapi-vim'
        " tpope/vim-haml
    "}


    " Javascript {
        " elzr/vim-json {
            if isdirectory(expand("~/.vim/bundle/vim-json"))
                nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
                let g:vim_json_syntax_conceal = 0
            endif
        " }
        " groenewege/vim-less
        " pangloss/vim-javascript {
            if isdirectory(expand("~/.vim/bundle/vim-javascript"))
                let g:javascript_plugin_ngdoc = 1
                let g:javascript_plugin_flow = 1
                " Enables code folding based on our syntax file.
                " Please note this can have a dramatic effect on performance and because it is a
                " global vim option, we do not set it ourselves.
                "set foldmethod=syntax
            endif
        " }
        " briancollins/vim-jst
        " kchmck/vim-coffee-script
    " }


    " C {
        " a.vim {
            if isdirectory(expand("~/.vim/bundle/a.vim/"))
                nnoremap <silent> <F12> :A<CR>
            endif
        "}
    "
    " }


    " Python {
        " Disable if python support not present
        if !has('python') && !has('python3')
            let g:pymode = 0
        endif

        if isdirectory(expand("~/.vim/bundle/python-mode"))
            let g:pymode_lint_checkers = ['pyflakes']
            let g:pymode_trim_whitespaces = 0
            let g:pymode_options = 0
            let g:pymode_rope = 0
        endif
    " }


"    " Writing{
"       if count(g:bundle_groups, 'writing')
"            " TextObj Sentence {
"                augroup textobj_sentence
"                   autocmd!
"                   autocmd FileType markdown call textobj#sentence#init()
"                   autocmd FileType textile call textobj#sentence#init()
"                   autocmd FileType text call textobj#sentence#init()
"                augroup END
"            " }
"            " TextObj Quote {
"                augroup textobj_quote
"                    autocmd!
"                    autocmd FileType markdown call textobj#quote#init()
"                    autocmd FileType textile call textobj#quote#init()
"                    autocmd FileType text call textobj#quote#init({'educate': 0})
"                augroup END
"           " }
"        endif
"    " }


"    " GoLang {
"        if count(g:bundle_groups, 'go')
"            let g:go_highlight_functions = 1
"            let g:go_highlight_methods = 1
"            let g:go_highlight_structs = 1
"            let g:go_highlight_operators = 1
"            let g:go_highlight_build_constraints = 1
"            let g:go_fmt_command = "goimports"
"            let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
"            let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
"            au FileType go nmap <Leader>s <Plug>(go-implements)
"            au FileType go nmap <Leader>i <Plug>(go-info)
"            au FileType go nmap <Leader>e <Plug>(go-rename)
"            au FileType go nmap <leader>r <Plug>(go-run)
"            au FileType go nmap <leader>b <Plug>(go-build)
"            au FileType go nmap <leader>t <Plug>(go-test)
"            au FileType go nmap <Leader>gd <Plug>(go-doc)
"            au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
"            au FileType go nmap <leader>co <Plug>(go-coverage)
"        endif
"    " }


"    " Misc {
"        if isdirectory(expand("~/.vim/bundle/nerdtree"))
"            let g:NERDShutUp=1
"        endif
"        if isdirectory(expand("~/.vim/bundle/matchit.zip"))
"            let b:match_ignorecase = 1
"        endif
"    " }


    " FIXME: Isn't this for Syntastic to handle?
    " Haskell post write lint and check with ghcmod
    " $ `cabal install ghcmod` if missing and ensure
    " ~/.cabal/bin is in your $PATH.
    if !executable("ghcmod")
        autocmd BufWritePost *.hs GhcModCheckAndLintAsync
    endif

" }
